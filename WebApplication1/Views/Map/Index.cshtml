@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<script src="https://code.jquery.com/jquery-3.6.4.min.js" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"></script>
<script src="https://kit.fontawesome.com/your-kit-id.js" crossorigin="anonymous"></script>

<link href="~/Content/ol.css" rel="stylesheet" />
<link href="~/Content/siteMap.css" rel="stylesheet" />

<script src="~/Content/ol.js"></script>

<div id="divMap"></div>






<div id="divOptions" style="background-color: black; font-family: serif; font-weight: bold; color: #333333;">




    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer" />

        <style>

            .main-button, .side-button {
                display: flex;
                align-items: center;
                background-color: #000000;
                color: white;
                border-color: black;
                width: 100%;
                padding: 0px;
                height: 75px;
                font-family: 'Century Gothic', sans-serif; /* Set font-family to Century Gothic */
            }

                .main-button i {
                    font-size: 20px;
                    margin-left: 10px;
                    margin-right: 15px;
                }

                .side-button i {
                    font-size: 8px;
                    margin-left: 25px;
                    margin-right: 10px;
                }

            .panel {
                display: none;
                margin-top: 0px;
            }

            .side-button {
                display: block;
                margin-top: 0;
                text-align: left;
            }

            .selected {
                background-color: #3b5998;
            }

                .selected i {
                    color: #ffffff;
                }
        </style>
        <title>Button Panel Example</title>
    </head>
    <body>

        <div class="d-grid gap">
            <button class="btn btn-lg btn-primary main-button" type="button" onclick="togglePanel('panel1')">
                <i class="fa-solid fa-filter"></i> Attributes
            </button>
            <div id="panel1" class="panel"></div>
            <button class="btn btn-lg btn-primary main-button" type="button" onclick="togglePanel('panel2')">
                <i class="fa-solid fa-shapes"></i> Geometry
            </button>
            <div id="panel2" class="panel"></div>
        </div>

        <script>
            let selectedType = "none";
            let KontureType = "none";

            function togglePanel(panelId) {
                const panel = document.getElementById(panelId);

                if (panel.style.display === 'none' || panel.style.display === '') {
                    panel.style.display = 'block';

                    if (panelId === 'panel1' && panel.childElementCount === 0) {
                        initializePanel1();
                    } else if (panelId === 'panel2' && panel.childElementCount === 0) {
                        initializePanel2();
                    }
                } else {
                    panel.style.display = 'none';
                }
            }

            function initializePanel1() {
                const panelButton1 = createPanelButton('Time', 'side-button', 'fa-regular fa-circle', 'fa-regular fa-circle-xmark', 'panelButton1', 'panelButton2', 'time', 'energy');
                const panelButton2 = createPanelButton('Energy', 'side-button', 'fa-regular fa-circle', 'fa-regular fa-circle-xmark', 'panelButton2', 'panelButton1', 'energy', 'time');

                document.getElementById('panel1').appendChild(panelButton1);
                document.getElementById('panel1').appendChild(panelButton2);

                // Restore selected state
                restoreSelectedState(panelButton1);
                restoreSelectedState(panelButton2);
            }

            function initializePanel2() {
                const panelButton3 = createPanelButton('Concave', 'side-button', 'fa-regular fa-circle', 'fa-regular fa-circle-xmark', 'panelButton3', 'panelButton4', 'concave', 'convex');
                const panelButton4 = createPanelButton('Convex', 'side-button', 'fa-regular fa-circle', 'fa-regular fa-circle-xmark', 'panelButton4', 'panelButton3', 'convex', 'concave');

                document.getElementById('panel2').appendChild(panelButton3);
                document.getElementById('panel2').appendChild(panelButton4);

                // Restore selected state
                restoreSelectedState(panelButton3);
                restoreSelectedState(panelButton4);
            }

            function createPanelButton(text, className, defaultIconClass, toggleIconClass, buttonId, otherButtonId, type, otherType) {
                const panelButton = document.createElement('button');
                panelButton.className = `btn btn-lg btn-primary ${className}`;
                panelButton.type = 'button';
                panelButton.id = buttonId;

                const defaultIconElement = document.createElement('i');
                defaultIconElement.className = defaultIconClass;
                defaultIconElement.style.fontSize = '15px';

                panelButton.appendChild(defaultIconElement);

                panelButton.innerHTML += ` ${text}`;

                panelButton.addEventListener('click', function () {
                    console.log(`${text} clicked`);

                    const otherButton = document.getElementById(otherButtonId);

                    panelButton.firstChild.className = toggleIconClass;
                    otherButton.firstChild.className = defaultIconClass;

                    if (type === 'concave' || type === 'convex') {
                        KontureType = `${text} Hull`;
                        console.log(`KontureType changed to: ${KontureType}`);
                        console.log(`Selected Type: ${selectedType}`);
                    }

                    if (type === 'time' || type === 'energy') {
                        selectedType = type;
                        console.log(`KontureType changed to: ${KontureType}`);
                        console.log(`Selected Type: ${selectedType}`);
                    }

                });

                return panelButton;
            }

            function restoreSelectedState(button) {
                const selectedType = button.firstChild.className === 'fa-regular fa-circle-xmark' ? button.id : null;
                if (selectedType) {
                    button.classList.add('selected');
                    button.firstChild.className = 'fa-regular fa-circle-xmark';
                }
            }
        </script>

    </body>
</html>






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-MCw98/SFnGE8fJT3PBnv4efUshCtN+flQ02Orj8ajCfbqFu1A6LuhMabOfFQyMOh" crossorigin="anonymous">
    <style>
        body {
            font-family: 'Century Gothic', sans-serif;
            color: white;
        }

        .slider-value {
            font-family: 'Century Gothic', sans-serif;
            position: absolute;
            bottom: 30px; /* Adjust the distance from the slider handle */
            background-color: white;
            border: 1px solid #ccc;
            padding: 3px;
            border-radius: 5px;
            white-space: nowrap; /* Prevent text from wrapping */
            text-align: center; /* Center text within the box */
            width: 30px; /* Adjust the width of the box */
            transform: translateX(-50%); /* Center the box horizontally */
            display: none; /* Initially hide the box */
            font-size: 16px;
        }

        .slider-label {
            font-family: 'Century Gothic', sans-serif;
            text-align: left; /* Align labels to the left */
            font-size: 20px;
            color: white;
        }

        .slider-text {
            font-family: 'Century Gothic', sans-serif;
            text-align: right; /* Align text below sliders to the right */
            margin-top: 8px; /* Add top margin for better spacing */
            font-size: 14px;
            color: white;
        }

        .slider-container {
            font-family: 'Century Gothic', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            font-size: 20px;
        }
    </style>
    <title>Slider Example</title>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <fieldset class="form-group">
                    <legend class="mt-4 slider-label"><i class="fa-regular fa-clock"></i>&nbsp;&nbsp;Time</legend>
                    <br />
                    <br />
                    <div class="slider-container">
                        <div class="position-relative">
                            <input type="range" class="form-range" min="0" max="20" step="1" id="customRange1" oninput="updateValue('value1', this.value, 'label1')">
                            <div id="value1" class="slider-value"></div>
                        </div>
                        <span class="slider-text">in minutes</span>
                    </div>
                </fieldset>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <fieldset class="form-group">
                    <legend class="mt-4 slider-label"><i class="fa-solid fa-bolt"></i>&nbsp;&nbsp;Energy</legend>
                    <br />
                    <br />
                    <div class="slider-container">
                        <div class="position-relative">
                            <input type="range" class="form-range" min="0" max="2" step="0.05" id="customRange2" oninput="updateValue('value2', this.value, 'label2')">
                            <div id="value2" class="slider-value"></div>
                        </div>
                        <span class="slider-text">in kWh</span>
                    </div>
                </fieldset>
            </div>
        </div>
        <input type="hidden" id="hidden1" name="customRange1">
        <input type="hidden" id="hidden2" name="customRange2">
    </div>

    <script src="https://code.jquery.com/jquery-3.6.4.min.js" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"></script>

    <script>
        function updateValue(elementId, value, labelId) {
            const slider = document.getElementById(elementId.replace('value', 'customRange'));
            const sliderValueElement = document.getElementById(elementId);
            const percent = (slider.value - slider.min) / (slider.max - slider.min);
            const offsetLeft = percent * slider.offsetWidth;
            sliderValueElement.style.left = slider.offsetLeft + offsetLeft + 'px';

            // Format the value for the energy slider
            const formattedValue = (elementId === 'value2') ? value.replace('.', ',') : value;

            sliderValueElement.innerText = formattedValue;

            // Show the box when the slider is being used
            sliderValueElement.style.display = 'block';

            // Update the hidden input value
            const hiddenInput = document.getElementById('hidden' + elementId.charAt(elementId.length - 1));
            hiddenInput.value = formattedValue;

            // Automatically submit the form when slider values change
            submitForm();
        }
    </script>
</body>
</html>

<br />

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Add the Font Awesome library link here if not included -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha384-cJXfV5A5q3GxdxMXQ/Rqe5ePdiZ/S3U6f5nI+YXg6lN7L2SRfi4a/7FmC5P9Yfo4" crossorigin="anonymous">
    <style>
        body {
            font-family: 'Century Gothic', sans-serif;
        }

        label {
            font-family: 'Century Gothic', sans-serif;
            font-size: 14px;
            color: white;
            margin-left: 10px;
        }

        input {
            font-family: 'Century Gothic', sans-serif;
            font-size: 14px;
            background-color: black; /* Set the background color to black */
            border: none; /* Remove the border */
            color: white; /* Set the text color to white */
            padding: 5px; /* Add padding for better appearance */
            max-width: 150px;
        }
    </style>
    <title>Location Example</title>
</head>
<body>
    <label><i class="fas fa-x"></i>&nbsp;&nbsp;Latitude:&nbsp;&nbsp;&nbsp;</label>
    <input type="text" id="txtLatitude" readonly="true" disabled />
    <br>
    <label><i class="fas fa-y"></i>&nbsp;&nbsp;Longitude:</label>
    <input type="text" id="txtLongitude" readonly="true" disabled />
</body>
</html>






<br>
<button class="btn btn-lg btn-primary main-button" type="button" style="width: 100%; margin: 2px 0; padding: 10px" onclick="computeConture()">
    <i class="fa-regular fa-circle-play" style="font-size: 20px; margin-left: 10px; margin-right: 15px;"></i>
    Start
</button>








</div>



@*Glavni dio javascript koda*@
<script type="text/javascript">
    var longitude = 0
    var latitude =0
    var plotedObjects = [];
    var plotedVectorSources = [];

    var map = new ol.Map({
        interactions: ol.interaction.defaults({ doubleClickZoom: false }),
        target: 'divMap',
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM()
            })
        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([15.981179, 45.805281]),
            zoom: 12
        })
    });

    var vectorSource = new ol.source.Vector({});

    map.on('dblclick', function (event) {
        var koordinate = ol.proj.toLonLat(event.coordinate);

        longitude = koordinate[0];
        latitude = koordinate[1];

        document.getElementById('txtLatitude').value = latitude;
        document.getElementById('txtLongitude').value = longitude;



    });

    //Varijable




    function computeConture() {

        // Event listeners for radio buttons
        $(document).ready(function () {
            $('input[name="optionsRadios"]').on('change', function () {
                var selectedType = $(this).val();
                console.log('Radio button changed:', selectedType);
                $('#selectedAttribute').val(selectedType);
            });
        });

        console.log('Longitude:', longitude);
        console.log('Latitude:', latitude);
        console.log('Selected Type:', $('#selectedAttribute').val());
        console.log('Selected Var Time:', $('#hidden1').val());
        console.log('Selected Var Energy:', $('#hidden2').val());
        console.log('Selected Konture Type:', KontureType);

        $.ajax({
             type: "POST",
            url: "@Url.Action("ComputeConture")",
            data: { longitude: longitude, latitude: latitude, selectedType: selectedType, selectedVarTime: $('#hidden1').val(), selectedVarEnergy: $('#hidden2').val(), KontureType: KontureType, strVrijemePocetka: 0 },
            success: succesfullCall,//Funkcija koja se poziva ako je poziv bio uspješan
            failure: function (response) {
            //Ispiši grešku u malom prozorčiću
            alert(response.error);
            }
        });

    }

    function succesfullCall(response) {
        console.log(response);

        var wkt = response;

        // Parse the WKT to create a geometry
        var polygonGeometry = new ol.format.WKT().readGeometry(wkt, {
            dataProjection: 'EPSG:4326', // WGS84
            featureProjection: 'EPSG:3857' // Spherical Mercator
        });

        console.log(polygonGeometry);

        // Create a feature using the polygon geometry
        var polygonFeature = new ol.Feature(polygonGeometry);

        // Create a vector source and add the feature to it
        var vectorSource = new ol.source.Vector({
            features: [polygonFeature]
        });

        color = random_rgba();
        console.log(color);
        // Define the style for the vector layer
        var vectorStyle = new ol.style.Style({
            fill: new ol.style.Fill({
                color: color// Red color with 50% transparency
            }),
            stroke: new ol.style.Stroke({
                color: color,
                width: 2
            })
        });

        // Create a vector layer with the vector source and the defined style
        var vectorLayer = new ol.layer.Vector({
            source: vectorSource,
            style: vectorStyle
        });


        // Add the vector layer to the map
        map.addLayer(vectorLayer);
    }

    // Funkcija za stvaranje slučajne boje
    function random_rgba() {
        var o = Math.round, r = Math.random, s = 255;
        return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',0.5)';
    }


</script>