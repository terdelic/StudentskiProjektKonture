@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<script src="https://code.jquery.com/jquery-3.6.4.min.js" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"></script>
<script src="https://kit.fontawesome.com/your-kit-id.js" crossorigin="anonymous"></script>

<link href="~/Content/ol.css" rel="stylesheet" />
<link href="~/Content/siteMap.css" rel="stylesheet" />

<script src="~/Content/ol.js"></script>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>

        .main-button, .side-button {
            display: flex;
            align-items: center;
            background-color: #000000;
            color: white;
            border-color: black;
            width: 100%;
            padding: 0px;
            height: 75px;
            font-family: 'Century Gothic', sans-serif; /* Set font-family to Century Gothic */
        }        

            .main-button i {
                font-size: 20px;
                margin-left: 10px;
                margin-right: 15px;
            }

            .side-button i {
                font-size: 8px;
                margin-left: 25px;
                margin-right: 10px;
            }

        .btn i,
        .btn span {
            color: gray;
        }

        .btn:hover {
            background-color: transparent !important;
        }

            /* Add this style to highlight only the text when hovering */
            .btn:hover i {
                color: #ffffff !important;
            }

        .panel {
            display: none;
            margin-top: 0px;
        }

        .side-button {
            display: block;
            margin-top: 0;
            text-align: left;
        }

        .selected {
            background-color: #3b5998;
        }

            .selected i {
                color: #ffffff;
            }

        body {
            font-family: 'Century Gothic', sans-serif;
            color: white;
        }
        

        .slider-value {
            font-family: 'Century Gothic', sans-serif;
            position: absolute;
            bottom: 30px; /* Adjust the distance from the slider handle */
            background-color: white;
            border: 1px solid #ccc;
            padding: 3px;
            border-radius: 5px;
            white-space: nowrap; /* Prevent text from wrapping */
            text-align: center; /* Center text within the box */
            width: 30px; /* Adjust the width of the box */
            transform: translateX(-50%); /* Center the box horizontally */
            display: none; /* Initially hide the box */
            font-size: 16px;
        }

        .slider-label {
            font-family: 'Century Gothic', sans-serif;
            text-align: left; /* Align labels to the left */
            font-size: 20px;
            color: white;
        }

        .slider-text {
            font-family: 'Century Gothic', sans-serif;
            text-align: right; /* Align text below sliders to the right */
            margin-top: 8px; /* Add top margin for better spacing */
            font-size: 14px;
            color: white;
        }

        .slider-container {
            font-family: 'Century Gothic', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            font-size: 20px;
            color: black;
        }
        /* Custom styles for the slider thumb */
        input[type="range"] {
            -webkit-appearance: none;
            appearance: none;
            background: transparent;
            height: 20px; /* Adjust the height as needed */
            border-radius: 1px; /* Set border-radius for rounded edges */
            outline: none; /* Remove the default focus outline */
        }

            input[type="range"]::-webkit-slider-thumb {
                -webkit-appearance: none;
                appearance: none;
                width: 17px;
                height: 17px;
                background-color: white;
                border: 1px solid black; /* Add a black border */
                border-radius: 45%;
                cursor: pointer;
            }

            input[type="range"]::-moz-range-thumb {
                width: 17px;
                height: 17px;
                background-color: white;
                border: 1px solid black; /* Add a black border */
                border-radius: 45%;
                cursor: pointer;
            }
            /* Style for the slider track (bar) */
            input[type="range"]::-webkit-slider-runnable-track {
                height: 5px; /* Adjust the height to match the thumb */
                border-radius: 5px; /* Set border-radius for rounded edges */
                background-color: white; /* Set the color of the slider track */
            }

            /* Style for Firefox slider track (bar) */
            input[type="range"]::-moz-range-track {
                height: 5px; /* Adjust the height to match the thumb */
                border-radius: 5px; /* Set border-radius for rounded edges */
                background-color: white; /* Set the color of the slider track */
            }

        label {
            font-family: 'Century Gothic', sans-serif;
            font-size: 16px;
            color: white;
            margin-left: 10px;
        }

        input {
            font-family: 'Century Gothic', sans-serif;
            font-size: 14px;
            background-color: black; /* Set the background color to black */
            border: none; /* Remove the border */
            color: white; /* Set the text color to white */
            padding: 5px; /* Add padding for better appearance */
            max-width: 150px;
        }
        #timeInput {
            font-family: 'Century Gothic', sans-serif;
            font-weight: bold;
            font-size: 15px;
            padding: 5px;
            width: 150px; /* Set the width to your preference */
            text-align: left;
            outline: none;
            margin-left: 30px; /* Adjust the margin to move the text input to the right */
            width:80px;
        }

        .icon-button {
            background: none;
            border: none;
            cursor: pointer;
            color: white;
        }
        .label-icon i.fa-clock {
            margin-right: 0px; /* Adjust spacing between icon and label text */
        }
        .input-wrapper {
            display: flex;
            align-items: center;
        }
        .icon-button i.fa-rotate-right {
            color: gray; /* Set the default color to gray */
        }

        .icon-button:hover i.fa-rotate-right {
            color: white; /* Change the icon color to white on hover */
        }
        
               

        
    </style>


</head>
<body>
    <div class="sidebar">

        <div class="d-grid gap">
            <button class="btn btn-lg btn-primary main-button" type="button">
                <i class="fa-solid fa-bars"></i> Menu
            </button>
        </div>



        <div class="d-grid gap">
            <button class="btn btn-lg btn-primary main-button" type="button" onclick="togglePanel('panel1')">
                <i class="fa-solid fa-filter"></i> Attributes
            </button>
            <div id="panel1" class="panel"></div>
            <button class="btn btn-lg btn-primary main-button" type="button" onclick="togglePanel('panel2')">
                <i class="fa-solid fa-shapes"></i> Geometry
            </button>
            <div id="panel2" class="panel"></div>
        </div>
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <fieldset class="form-group">
                        <legend class="mt-4 slider-label"><i class="fa-solid fa-hourglass-start"></i>&nbsp;&nbsp;Time</legend>
                        <br />
                        <br />
                        <div class="slider-container">
                            <div class="position-relative">
                                <input type="range" class="form-range" min="0" max="20" step="1" id="customRange1" oninput="updateValue('value1', this.value, 'label1')">
                                <div id="value1" class="slider-value"></div>
                            </div>
                            <span class="slider-text">in minutes</span>
                        </div>
                    </fieldset>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <fieldset class="form-group">
                        <legend class="mt-4 slider-label"><i class="fa-solid fa-bolt"></i>&nbsp;&nbsp;Energy</legend>
                        <br />
                        <br />
                        <div class="slider-container">
                            <div class="position-relative">
                                <input type="range" class="form-range" min="0" max="2" step="0.1" id="customRange2" oninput="updateValue('value2', this.value, 'label2')">
                                <div id="value2" class="slider-value"></div>
                                <div class="SelectBtn"></div>
                            </div>
                            <span class="slider-text">in kWh</span>
                        </div>
                    </fieldset>
                </div>
            </div>
            <input type="hidden" id="hidden1" name="customRange1">
            <input type="hidden" id="hidden2" name="customRange2">
        </div>
        <br />        
            <label for="timeInput"><i class="fa-regular fa-clock"></i>&nbsp;&nbsp;Start time </label>
            <br />
            <div class="input-wrapper">
                <input type="text" name="timeInput" id="timeInput" maxlength="8" placeholder="00:00:00" required />
                <button class="icon-button" onclick="rotateTimeInput()">
                    <i class="fa-solid fa-rotate-right"></i>
                </button>
            </div>
            <br>

            <button class="btn btn-lg btn-primary main-button" type="button" onclick="computeConture()">
                <i class="fa-regular fa-circle-play"></i> Start
            </button>


    </div>
    <script>
        let selectedType = "none";
        let KontureType = "none";





        const timeInput = document.getElementById("timeInput");

        timeInput.addEventListener("input", (e) => {
            const valuesOfInput = e.target.value.replace(/[^0-9]/g, '').slice(0, 6);

            const formattedTime = valuesOfInput.replace(/(\d{2})(\d{0,2})(\d{0,2})/, (_, p1, p2, p3) => {
                let result = p1;
                if (p2 || p3) result += `:${p2 || '00'}${p3 ? `:${p3}` : ''}`;
                return result;
            });

            e.target.value = formattedTime;

        });

        function rotateTimeInput() {
            const timeInput = document.getElementById("timeInput");
            timeInput.value = ""; // Reset the value to an empty string
        }

        function togglePanel(panelId) {
            const panel = document.getElementById(panelId);

            if (panel.style.display === 'none' || panel.style.display === '') {
                panel.style.display = 'block';

                if (panelId === 'panel1' && panel.childElementCount === 0) {
                    initializePanel1();
                } else if (panelId === 'panel2' && panel.childElementCount === 0) {
                    initializePanel2();
                }
            } else {
                panel.style.display = 'none';
            }
        }

        function initializePanel1() {
            const panelButton1 = createPanelButton('Time', 'side-button', 'fa-regular fa-circle', 'fa-regular fa-circle-xmark', 'panelButton1', 'panelButton2', 'time', 'energy');
            const panelButton2 = createPanelButton('Energy', 'side-button', 'fa-regular fa-circle', 'fa-regular fa-circle-xmark', 'panelButton2', 'panelButton1', 'energy', 'time');

            document.getElementById('panel1').appendChild(panelButton1);
            document.getElementById('panel1').appendChild(panelButton2);

            // Restore selected state
            restoreSelectedState(panelButton1);
            restoreSelectedState(panelButton2);
        }

        function initializePanel2() {
            const panelButton3 = createPanelButton('Concave', 'side-button', 'fa-regular fa-circle', 'fa-regular fa-circle-xmark', 'panelButton3', 'panelButton4', 'concave', 'convex');
            const panelButton4 = createPanelButton('Convex', 'side-button', 'fa-regular fa-circle', 'fa-regular fa-circle-xmark', 'panelButton4', 'panelButton3', 'convex', 'concave');

            document.getElementById('panel2').appendChild(panelButton3);
            document.getElementById('panel2').appendChild(panelButton4);

            // Restore selected state
            restoreSelectedState(panelButton3);
            restoreSelectedState(panelButton4);
        }

        function createPanelButton(text, className, defaultIconClass, toggleIconClass, buttonId, otherButtonId, type, otherType) {
            const panelButton = document.createElement('button');
            panelButton.className = `btn btn-lg btn-primary ${className}`;
            panelButton.type = 'button';
            panelButton.id = buttonId;

            const defaultIconElement = document.createElement('i');
            defaultIconElement.className = defaultIconClass;
            defaultIconElement.style.fontSize = '15px';

            panelButton.appendChild(defaultIconElement);

            panelButton.innerHTML += ` ${text}`;

            panelButton.addEventListener('click', function () {
                console.log(`${text} clicked`);

                const otherButton = document.getElementById(otherButtonId);

                panelButton.firstChild.className = toggleIconClass;
                otherButton.firstChild.className = defaultIconClass;

                if (type === 'concave' || type === 'convex') {
                    KontureType = `${text} Hull`;
                    console.log(`KontureType changed to: ${KontureType}`);
                    console.log(`Selected Type: ${selectedType}`);
                }

                if (type === 'time' || type === 'energy') {
                    selectedType = type;
                    console.log(`KontureType changed to: ${KontureType}`);
                    console.log(`Selected Type: ${selectedType}`);
                }

            });

            return panelButton;
        }

        function restoreSelectedState(button) {
            const selectedType = button.firstChild.className === 'fa-regular fa-circle-xmark' ? button.id : null;
            if (selectedType) {
                button.classList.add('selected');
                button.firstChild.className = 'fa-regular fa-circle-xmark';
            }
        }
        function updateValue(elementId, value, labelId) {
            const slider = document.getElementById(elementId.replace('value', 'customRange'));
            const sliderValueElement = document.getElementById(elementId);
            const percent = (slider.value - slider.min) / (slider.max - slider.min);
            const offsetLeft = percent * slider.offsetWidth;
            sliderValueElement.style.left = slider.offsetLeft + offsetLeft + 'px';

            // Format the value for the energy slider
            const formattedValue = (elementId === 'value2') ? value.replace('.', ',') : value;

            sliderValueElement.innerText = formattedValue;

            // Show the box when the slider is being used
            sliderValueElement.style.display = 'block';

            // Update the hidden input value
            const hiddenInput = document.getElementById('hidden' + elementId.charAt(elementId.length - 1));
            hiddenInput.value = formattedValue;

            // Automatically submit the form when slider values change
            submitForm();
        }

        document.querySelector('.main-button').addEventListener('click', function () {
            toggleSidebar();
        });

        function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');

            if (sidebar.classList.contains('open')) {
                sidebar.classList.remove('open');
            } else {
                sidebar.classList.add('open');
            }
        }

        let strVrijemePocetka = '';

        function updateStrVrijemePocetka() {
            const timeInput = document.getElementById("timeInput");
            strVrijemePocetka = timeInput.value;

            // Now you can use strVrijemePocetka for your further processing or updating
            console.log("Updated strVrijemePocetka:", strVrijemePocetka);

            // If you need to use this value in an AJAX call or any other logic, you can pass it accordingly.
            // For example, update the computeConture function:
            // computeConture(strVrijemePocetka);
        }


    </script>


</body>
</html>


<div id="divMap"></div>

<<div id="customAlert" class="custom-alert" style="display: none;">
    <span id="alertIcon" class="alert-icon"></span>
    <span id="alertText">Longitude: 0 Latitude: 0</span>
    <span id="closeAlert" class="close-btn" onclick="closeCustomAlert()">×</span>
</div>

<label><i class="fas fa-x"></i>&nbsp;&nbsp;Latitude:&nbsp;&nbsp;&nbsp;</label>
<input type="text" id="txtLatitude" readonly="true" disabled />
<br>
<label><i class="fas fa-y" style="margin: 1px; top: 0px"></i>&nbsp;&nbsp;Longitude:</label>
<input type="text" id="txtLongitude" readonly="true" disabled />



<style>
    .custom-alert {
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: rgba(76, 175, 80, 0.95); /* Use rgba for transparency */
        color: white;
        padding: 15px;
        border-radius: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);
        z-index: 100000 !important;
        width: 250px;
        font-size: 14px;
        border: 1px solid black;
    }


    #alertText {
        font-family: 'Century Gothic', sans-serif;
        /* Add more styles as needed */
    }

    .alert-icon {
        /* Add styles for the alert icon */
        font-family: 'FontAwesome'; /* Assuming you're using FontAwesome for icons */
        font-size: 16px;
        margin-right: 10px;
    }

    .close-btn {
        cursor: pointer;
        font-size: 20px;
        font-weight: bold;
        margin-left: 10px;
    }
</style>











@*Glavni dio javascript koda*@
<script type="text/javascript">
    var longitude = 0
    var latitude =0
    var plotedObjects = [];
    var plotedVectorSources = [];

    var map = new ol.Map({
        interactions: ol.interaction.defaults({ doubleClickZoom: false }),
        target: 'divMap',
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM()
            })
        ],
        view: new ol.View({
            center: ol.proj.fromLonLat([15.981179, 45.805281]),
            zoom: 12
        })
    });

    var vectorSource = new ol.source.Vector({});

    map.on('dblclick', function (event) {
        var koordinate = ol.proj.toLonLat(event.coordinate);

        longitude = koordinate[0];
        latitude = koordinate[1];

        document.getElementById('txtLatitude').value = latitude;
        document.getElementById('txtLongitude').value = longitude;



    });

    map.on('dblclick', function (event) {
        var koordinate = ol.proj.toLonLat(event.coordinate);

        longitude = koordinate[0];
        latitude = koordinate[1];

        document.getElementById('txtLatitude').value = latitude;
        document.getElementById('txtLongitude').value = longitude;

        // Show and update the custom alert
        var alertText = document.getElementById('alertText');
        alertText.textContent = 'Longitude: ' + longitude + ', Latitude: ' + latitude;

        var customAlert = document.getElementById('customAlert');
        customAlert.style.display = 'flex';

        // Hide the custom alert after 2 seconds (adjust the duration as needed)
        setTimeout(function () {
            customAlert.style.display = 'none';
        }, 10000);
    });

    // Function to close the custom alert
    function closeCustomAlert() {
        var customAlert = document.getElementById('customAlert');
        customAlert.style.display = 'none';
    }

    //Varijable




    function computeConture() {


        // Event listeners for radio buttons
        $(document).ready(function () {
            $('input[name="optionsRadios"]').on('change', function () {
                var selectedType = $(this).val();
                console.log('Radio button changed:', selectedType);
                $('#selectedAttribute').val(selectedType);
            });
        });

        console.log('Longitude:', longitude);
        console.log('Latitude:', latitude);
        console.log('Selected Type:', selectedType);
        console.log('Selected Var Time:', $('#hidden1').val());
        console.log('Selected Var Energy:', $('#hidden2').val());
        console.log('Selected Konture Type:', KontureType);
        console.log('Selected Vrijeme Pocetka:', strVrijemePocetka);


        $.ajax({
             type: "POST",
            url: "@Url.Action("ComputeConture")",
            data: { longitude: longitude, latitude: latitude, selectedType: selectedType, selectedVarTime: $('#hidden1').val(), selectedVarEnergy: $('#hidden2').val(), KontureType: KontureType, strVrijemePocetka: 0 },
            success: succesfullCall,//Funkcija koja se poziva ako je poziv bio uspješan
            failure: function (response) {
            //Ispiši grešku u malom prozorčiću
            alert(response.error);
            }
        });

    }




    function succesfullCall(response) {
        console.log(response);

        var wkt = response;

        // Parse the WKT to create a geometry
        var polygonGeometry = new ol.format.WKT().readGeometry(wkt, {
            dataProjection: 'EPSG:4326', // WGS84
            featureProjection: 'EPSG:3857' // Spherical Mercator
        });

        console.log(polygonGeometry);

        // Create a feature using the polygon geometry
        var polygonFeature = new ol.Feature(polygonGeometry);

        // Create a vector source and add the feature to it
        var vectorSource = new ol.source.Vector({
            features: [polygonFeature]
        });

        // Get the next color index from the presets array
        var colorIndex = lastColorIndex % colorPresets.length;
        lastColorIndex++;

        // Use the color index to get the corresponding color from the presets array
        var color = colorPresets[colorIndex];


        // Define the style for the vector layer with the chosen color
        var vectorStyle = new ol.style.Style({
            fill: new ol.style.Fill({
                color: color
            }),
            stroke: new ol.style.Stroke({
                color: color,
                width: 2
            })
        });

        // Create a vector layer with the vector source and the defined style
        var vectorLayer = new ol.layer.Vector({
            source: vectorSource,
            style: vectorStyle
        });



        map.addLayer(vectorLayer);


        // Create a pill button element
        var pillButton = document.createElement('span');
        pillButton.className = 'badge rounded-pill d-flex justify-content-between align-items-center';
        pillButton.style.backgroundColor = 'black'; // Set the background color to black
        pillButton.style.border = '2px solid ' + color; // Set a border with color
        pillButton.style.width = '85px'; // Increased width to accommodate the checkmark


        // Create a span for the checkmark icon
        var checkmarkIcon = document.createElement('i');
        checkmarkIcon.className = 'fas fa-check'; // You may need to adjust the class based on your FontAwesome setup
        checkmarkIcon.style.color = 'white'; // Set the checkmark color to gray
        checkmarkIcon.style.marginRight = '5px'; // Add some margin to the right of the icon

        // Create a span for the layer created text
        var layerText = document.createElement('span');
        layerText.textContent = 'Layer';
        layerText.style.color = 'white'; // Set the text color to white

        // Create a span for the 'x' close button
        var closeButton = document.createElement('span');
        closeButton.textContent = 'x';
        closeButton.style.cursor = 'pointer';
        closeButton.style.marginLeft = '5px';
        closeButton.style.color = 'gray'; // Set initial color to gray


       

        // Add event listeners for hover effect
        closeButton.addEventListener('mouseenter', function () {
            closeButton.style.color = 'white'; // Change color to white on hover
        });

        closeButton.addEventListener('mouseleave', function () {
            closeButton.style.color = 'gray'; // Change color back to gray on mouse leave
        });

        // Add event listener for click on the pill button
        pillButton.addEventListener('click', function () {
            // Toggle the visibility of the layer
            vectorLayer.setVisible(!vectorLayer.getVisible());

            // Toggle the visibility of the checkmark icon
            checkmarkIcon.style.display = vectorLayer.getVisible() ? 'inline' : 'none';

            // Update the text content based on the layer's visibility
            layerText.textContent = vectorLayer.getVisible() ? 'Layer' : 'Layer';

            // Modify the width of the pillButton based on layer visibility
            pillButton.style.width = vectorLayer.getVisible() ? '85px' : '68px';

        });

        // Add event listener for click on the close button
        closeButton.addEventListener('click', function () {
            // Your code to remove the layer from the map
            map.removeLayer(vectorLayer); // assuming vectorLayer is the layer you want to remove
            console.log('Layer deleted!');
            // Remove the pillButton from the sidebar
            sidebar[0].removeChild(pillButton);
        });

        // Append the checkmarkIcon, layerText, and closeButton to the pillButton
        pillButton.appendChild(checkmarkIcon);
        pillButton.appendChild(layerText);
        pillButton.appendChild(closeButton);


        // Append the pillButton to the sidebar
        var sidebar = document.getElementsByClassName('sidebar');
        if (sidebar && sidebar.length > 0) {
            sidebar[0].appendChild(document.createElement('br'));
            sidebar[0].appendChild(pillButton);
        }



    }

    var lastColorIndex = 0; // Keep track of the last used color index
    var colorPresets = [
        'rgba(255, 0, 0, 0.5)',     // Red
        'rgba(0, 255, 0, 0.5)',     // Green
        'rgba(255, 0, 255, 0.5)',   // Magenta
        'rgba(0, 255, 255, 0.5)',   // Cyan
        'rgba(255, 255, 0, 0.5)',   // Cyan
    ];


</script>